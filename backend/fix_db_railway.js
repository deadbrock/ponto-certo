const { Client } = require('pg');
const bcrypt = require('bcrypt');

// URL de conex√£o do Railway (substitua pela sua)
const DATABASE_URL = 'postgresql://postgres:acAshacscvQtOROcjEpuxaiXXUFyJDqC@tramway.proxy.rlwy.net:43129/railway';

async function corrigirBanco() {
    const client = new Client({
        connectionString: DATABASE_URL,
        ssl: { rejectUnauthorized: false }
    });

    try {
        console.log('üîå Conectando ao PostgreSQL Railway...');
        await client.connect();
        console.log('‚úÖ Conectado!');

        // 1. Verificar estrutura atual
        console.log('üîç Verificando estrutura da tabela usuarios...');
        const estrutura = await client.query(`
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'usuarios' 
            ORDER BY ordinal_position
        `);
        console.log('üìã Estrutura atual:', estrutura.rows);

        // 2. Recriar tabela usuarios
        console.log('üîß Recriando tabela usuarios...');
        await client.query('DROP TABLE IF EXISTS usuarios CASCADE');
        
        await client.query(`
            CREATE TABLE usuarios (
                id SERIAL PRIMARY KEY,
                nome VARCHAR(100) NOT NULL,
                email VARCHAR(100) UNIQUE NOT NULL,
                senha_hash VARCHAR(255) NOT NULL,
                perfil VARCHAR(20) NOT NULL,
                ativo BOOLEAN DEFAULT true,
                criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ Tabela usuarios criada!');

        // 3. Gerar hash correto para admin123
        console.log('üîí Gerando hash para senha admin123...');
        const senhaHash = await bcrypt.hash('admin123', 10);
        console.log('‚úÖ Hash gerado:', senhaHash.substring(0, 20) + '...');

        // 4. Inserir usu√°rio administrador
        console.log('üë§ Inserindo usu√°rio administrador...');
        const resultado = await client.query(`
            INSERT INTO usuarios (nome, email, senha_hash, perfil, ativo) 
            VALUES ($1, $2, $3, $4, $5) 
            RETURNING id, nome, email, perfil
        `, ['Administrador', 'admin@fgservices.com', senhaHash, 'administrador', true]);
        
        console.log('‚úÖ Usu√°rio criado:', resultado.rows[0]);

        // 5. Verificar login
        console.log('üß™ Testando senha...');
        const usuario = await client.query('SELECT * FROM usuarios WHERE email = $1', ['admin@fgservices.com']);
        const senhaValida = await bcrypt.compare('admin123', usuario.rows[0].senha_hash);
        console.log('üîç Senha v√°lida:', senhaValida);

        // 6. Criar/verificar tabela configuracoes
        console.log('‚öôÔ∏è Verificando tabela configuracoes...');
        await client.query(`
            CREATE TABLE IF NOT EXISTS configuracoes (
                id SERIAL PRIMARY KEY,
                chave VARCHAR(100) UNIQUE NOT NULL,
                valor TEXT NOT NULL,
                descricao TEXT
            )
        `);

        await client.query(`
            INSERT INTO configuracoes (chave, valor, descricao) VALUES 
            ('sistema_inicializado', 'true', 'Sistema inicializado'),
            ('versao_sistema', '2.0', 'Vers√£o do sistema')
            ON CONFLICT (chave) DO NOTHING
        `);
        console.log('‚úÖ Configura√ß√µes inseridas!');

        console.log('\nüéâ BANCO CORRIGIDO COM SUCESSO!');
        console.log('üìß Email: admin@fgservices.com');
        console.log('üîë Senha: admin123');
        
    } catch (error) {
        console.error('‚ùå Erro:', error.message);
    } finally {
        await client.end();
        console.log('üîå Conex√£o fechada');
    }
}

corrigirBanco();