const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

/**
 * üîê GERENCIADOR DE CHAVES BIOM√âTRICAS
 * 
 * Sistema seguro para gera√ß√£o e gerenciamento de chaves de criptografia
 * para dados biom√©tricos sens√≠veis (LGPD Art. 46)
 */

const KEY_FILE_PATH = path.join(__dirname, '../keys/biometric.key');
const KEY_LENGTH = 32; // 256 bits para AES-256

/**
 * Gerar ou carregar chave mestra para dados biom√©tricos
 * @returns {Buffer} Chave de criptografia
 */
function getMasterBiometricKey() {
  try {
    // Verificar se chave j√° existe
    if (fs.existsSync(KEY_FILE_PATH)) {
      console.log('üîë SEGURAN√áA: Carregando chave biom√©trica existente');
      return fs.readFileSync(KEY_FILE_PATH);
    }
    
    // Gerar nova chave se n√£o existir
    console.log('üîë SEGURAN√áA: Gerando nova chave biom√©trica mestra');
    const masterKey = crypto.randomBytes(KEY_LENGTH);
    
    // Criar diret√≥rio seguro
    const keyDir = path.dirname(KEY_FILE_PATH);
    if (!fs.existsSync(keyDir)) {
      fs.mkdirSync(keyDir, { recursive: true, mode: 0o700 }); // Apenas owner
    }
    
    // Salvar chave com permiss√µes restritas
    fs.writeFileSync(KEY_FILE_PATH, masterKey, { mode: 0o600 }); // Apenas owner read/write
    
    console.log('üîí SEGURAN√áA: Chave biom√©trica mestra criada e protegida');
    return masterKey;
    
  } catch (error) {
    console.error('‚ùå SEGURAN√áA CR√çTICA: Erro ao gerenciar chave biom√©trica:', error);
    throw new Error('Falha cr√≠tica no sistema de chaves biom√©tricas');
  }
}

/**
 * Gerar chave derivada para opera√ß√£o espec√≠fica
 * @param {string} purpose - Finalidade da chave (ex: 'face-encryption')
 * @param {string} identifier - Identificador √∫nico (ex: colaborador_id)
 * @returns {Buffer} Chave derivada
 */
function getDerivedKey(purpose, identifier) {
  try {
    const masterKey = getMasterBiometricKey();
    const salt = crypto.createHash('sha256')
      .update(`${purpose}:${identifier}`)
      .digest();
    
    // Derivar chave usando PBKDF2
    const derivedKey = crypto.pbkdf2Sync(masterKey, salt, 100000, KEY_LENGTH, 'sha256');
    
    console.log(`üîë SEGURAN√áA: Chave derivada gerada para ${purpose}:${identifier}`);
    return derivedKey;
    
  } catch (error) {
    console.error('‚ùå SEGURAN√áA: Erro ao derivar chave:', error);
    throw new Error('Falha na deriva√ß√£o de chave biom√©trica');
  }
}

/**
 * Rotacionar chave mestra (para manuten√ß√£o de seguran√ßa)
 * ATEN√á√ÉO: Esta opera√ß√£o requer re-criptografia de todos os dados!
 */
function rotateMasterKey() {
  try {
    console.log('üîÑ SEGURAN√áA: Iniciando rota√ß√£o de chave mestra...');
    
    // Backup da chave atual
    if (fs.existsSync(KEY_FILE_PATH)) {
      const backupPath = KEY_FILE_PATH + '.backup.' + Date.now();
      fs.copyFileSync(KEY_FILE_PATH, backupPath);
      console.log(`üîÑ SEGURAN√áA: Backup da chave criado: ${backupPath}`);
    }
    
    // Gerar nova chave
    const newMasterKey = crypto.randomBytes(KEY_LENGTH);
    fs.writeFileSync(KEY_FILE_PATH, newMasterKey, { mode: 0o600 });
    
    console.log('üîÑ SEGURAN√áA: Nova chave mestra gerada');
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Todos os dados biom√©tricos precisam ser re-criptografados!');
    
    return newMasterKey;
    
  } catch (error) {
    console.error('‚ùå SEGURAN√áA CR√çTICA: Erro na rota√ß√£o de chave:', error);
    throw new Error('Falha cr√≠tica na rota√ß√£o de chave biom√©trica');
  }
}

/**
 * Verificar integridade do sistema de chaves
 * @returns {boolean} True se sistema est√° √≠ntegro
 */
function verifyKeyIntegrity() {
  try {
    // Verificar se arquivo de chave existe e tem permiss√µes corretas
    if (!fs.existsSync(KEY_FILE_PATH)) {
      console.warn('‚ö†Ô∏è  SEGURAN√áA: Arquivo de chave n√£o encontrado');
      return false;
    }
    
    const stats = fs.statSync(KEY_FILE_PATH);
    const mode = stats.mode & parseInt('777', 8);
    
    if (mode !== parseInt('600', 8)) {
      console.warn('‚ö†Ô∏è  SEGURAN√áA: Permiss√µes de chave incorretas:', mode.toString(8));
      return false;
    }
    
    // Verificar se chave tem tamanho correto
    const keyData = fs.readFileSync(KEY_FILE_PATH);
    if (keyData.length !== KEY_LENGTH) {
      console.warn('‚ö†Ô∏è  SEGURAN√áA: Tamanho de chave incorreto:', keyData.length);
      return false;
    }
    
    console.log('‚úÖ SEGURAN√áA: Integridade do sistema de chaves verificada');
    return true;
    
  } catch (error) {
    console.error('‚ùå SEGURAN√áA: Erro na verifica√ß√£o de integridade:', error);
    return false;
  }
}

/**
 * Limpar chaves da mem√≥ria (para seguran√ßa)
 */
function clearKeyCache() {
  // Em produ√ß√£o, implementar limpeza de cache de chaves
  console.log('üßπ SEGURAN√áA: Cache de chaves limpo');
}

/**
 * Log de auditoria para opera√ß√µes de chave
 */
function logKeyOperation(operation, details = {}) {
  const logEntry = {
    timestamp: new Date().toISOString(),
    operation: operation,
    details: details,
    security_level: 'critical',
    component: 'biometric-key-manager'
  };
  
  console.log('üîç AUDITORIA CHAVES:', JSON.stringify(logEntry));
  
  // Salvar em arquivo de auditoria espec√≠fico
  const auditPath = path.join(__dirname, '../logs/key_operations.log');
  const logDir = path.dirname(auditPath);
  
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true, mode: 0o700 });
  }
  
  fs.appendFileSync(auditPath, JSON.stringify(logEntry) + '\n', { mode: 0o600 });
}

module.exports = {
  getMasterBiometricKey,
  getDerivedKey,
  rotateMasterKey,
  verifyKeyIntegrity,
  clearKeyCache,
  logKeyOperation
};
